package main
/*Дана последовательность чисел (2,4,6,8,10). В данном примере найдем их сумму
квадратов(22+32+42….) с использованием конкурентных вычислений.*/
import (
	"fmt"
	"math"
	"sync"
)

func main() {
	// Воспользуемся sync.WaitGroup для ожидания завершения нескольких goroutine
	wg:=&sync.WaitGroup{}
	// Создадим канал, который будет использовать значения типа float64
	ch1:=make(chan float64)
	// Создадим массив с данными
	mas:=[...]float64{2,4,6,8,10}
	// Пройдем по массиву, применяя функцию к каждому элементу. Выполним эту функцию в отдельной горутине
	go func(ch chan <-float64){
	       for _,v:=range mas{
	       	wg.Add(1)            // Увеличиваем WaitGroup счетчик
			go func ( v float64,wg *sync.WaitGroup){
				defer wg.Done()       //Уменьшаем счетчик, когда горутина завершится
				pow:=math.Pow(v,2)
		     ch <- pow}(v,wg)} // отправляем полученные значения в канал
		wg.Wait()     // Ожидаем выполнения работы всех горутин
		close(ch) // закрываем канал, тем самым  завершаем цикл, который пытается итерироваться по значениям, идущим в канал.
	}(ch1)
sum:=float64(0)
for i:=range ch1{      // тот самый цикл, который который итерируется по значениям, идущим в канал
	sum+=i             // Обновляем значение sum, получая в итоге общую сумму!
}
	fmt.Println("Общая сумма равна: ",sum)
}
